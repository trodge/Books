{"version":3,"sources":["Search.js","Saved.js","registerServiceWorker.js","index.js","App.js"],"names":["Search","state","results","_this2","this","react_default","a","createElement","type","name","id","value","onClick","event","preventDefault","axios","get","concat","document","getElementById","then","console","log","setState","map","result","i","key","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","react_router_dom","to","react_router","path","Search_Search","Saved_Search","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"mSAIqBA,oNACjBC,MAAQ,CACJC,QAAS,4EAEJ,IAAAC,EAAAC,KACL,OAAOC,EAAAC,EAAAC,cAAA,8BAEHF,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,SAAOC,KAAK,OAAOC,KAAK,QAAQC,GAAG,UACnCL,EAAAC,EAAAC,cAAA,SAAOC,KAAK,SAASG,MAAM,SAASC,QAAS,SAAAC,GACzCA,EAAMC,iBACNC,IAAMC,IAAN,eAAAC,OAAyBC,SAASC,eAAe,SAASR,QACrDS,KAAK,SAAAlB,GACFmB,QAAQC,IAAIpB,GACZC,EAAKoB,SAASrB,SAI9BG,EAAAC,EAAAC,cAAA,WACKH,KAAKH,MAAMC,QAAQsB,IAAI,SAACC,EAAQC,GAAT,OAAerB,EAAAC,EAAAC,cAAA,OAAKoB,IAAKD,GAAID,cAnBjCG,cCDf5B,mLAEb,OAAOK,EAAAC,EAAAC,cAAA,iCAFqBqB,aCOpC,IAAMC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACThB,KAAK,SAAAoB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzC,QACfoC,UAAUC,cAAcO,WAK1BxB,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBwB,MAAM,SAAAC,GACL1B,QAAQ0B,MAAM,4CAA6CA,KChEjEC,IAASC,OAAO5C,EAAAC,EAAAC,cCKD,WACX,OAAOF,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,KACH7C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAMC,GAAG,WAAT,WAEJ9C,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAMC,GAAG,UAAT,YAIZ9C,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,KACI/C,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAOC,KAAK,WACRhD,EAAAC,EAAAC,cAAC+C,EAAD,OAEJjD,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAOC,KAAK,UACRhD,EAAAC,EAAAC,cAACgD,EAAD,UDtBA,MAASrC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBkB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,GAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAAnB,OAAMwC,GAAN,sBAEN5B,EAwCX,SAAiCO,GAE/BwB,MAAMxB,GACHhB,KAAK,SAAAyC,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQ/C,IAAI,gBAAgBgD,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAM7C,KAAK,SAAAoB,GACjCA,EAAa0B,aAAa9C,KAAK,WAC7BW,OAAOC,SAASmC,aAKpBhC,EAAgBC,KAGnBU,MAAM,WACLzB,QAAQC,IACN,mEAzDA8C,CAAwBhC,GAHxBD,EAAgBC,MC7BxBiC","file":"static/js/main.5db5a3cb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from 'axios';\r\nimport \"./App.css\";\r\n\r\nexport default class Search extends Component {\r\n    state = {\r\n        results: []\r\n    };\r\n    render() {\r\n        return <div>\r\n            Search for books\r\n            <form>\r\n                <input type=\"text\" name=\"terms\" id=\"terms\" />\r\n                <input type=\"submit\" value=\"Submit\" onClick={event => {\r\n                    event.preventDefault();\r\n                    axios.get(`/api/search/${document.getElementById('terms').value}`)\r\n                        .then(results => {\r\n                            console.log(results);\r\n                            this.setState(results);\r\n                        });\r\n                }} />\r\n            </form>\r\n            <div>\r\n                {this.state.results.map((result, i) => <div key={i}>{result}</div>)}\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\n\r\nexport default class Search extends Component {\r\n    render() {\r\n        return <div>\r\n            Saved books\r\n        </div>\r\n    }\r\n}\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\nregisterServiceWorker();\r\n","import React from \"react\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\nimport Search from './Search.js';\r\nimport Saved from './Saved.js';\r\nimport \"./App.css\";\r\n\r\nexport default function App() {\r\n    return <Router>\r\n        <nav>\r\n            <ul>\r\n                <li>\r\n                    <Link to=\"/search\">Search</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to=\"/saved\">Saved</Link>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n        <Switch>\r\n            <Route path=\"/search\">\r\n                <Search />\r\n            </Route>\r\n            <Route path=\"/saved\">\r\n                <Saved />\r\n            </Route>\r\n        </Switch>\r\n    </Router>\r\n}\r\n"],"sourceRoot":""}